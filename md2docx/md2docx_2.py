#!/usr/bin/env python3
"""
Enhanced Markdown to Beautiful DOCX Converter with Code Block Styling.

This script converts a Markdown file into a beautifully formatted DOCX file with custom
styles, page margins, header/footer, colors, typeface, and specialized styling for code blocks.
It supports:
  - Title and cover page
  - Headings (levels 1-6)
  - Fenced code blocks (using triple backticks) with shading and indentation
  - Block quotes
  - Unordered lists
  - Regular paragraphs

Usage:
    python md_to_docx_beautiful.py input.md output.docx

Dependencies:
    - python-docx (install via pip install python-docx)
"""

import re
import sys
import os
from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml import OxmlElement
from docx.oxml.ns import qn


def set_document_margins(document):
    """
    Set custom page margins for the document.
    """
    for section in document.sections:
        section.top_margin = Inches(1)
        section.bottom_margin = Inches(1)
        section.left_margin = Inches(1)
        section.right_margin = Inches(1)


def set_custom_styles(document):
    """
    Configure custom styles for Title, Normal, Headings, and Code blocks.
    """
    # Configure Title style
    title_style = document.styles['Title']
    title_font = title_style.font
    title_font.name = 'Calibri'
    title_font.size = Pt(28)
    title_font.bold = True
    title_font.color.rgb = RGBColor(0x2E, 0x74, 0xB5)  # Refined blue shade

    # Configure Normal style
    normal_style = document.styles['Normal']
    normal_font = normal_style.font
    normal_font.name = 'Calibri'
    normal_font.size = Pt(11)

    # Customize Heading styles (Heading 1-3 as examples)
    for i in range(1, 4):
        style = document.styles[f'Heading {i}']
        font = style.font
        font.name = 'Calibri'
        if i == 1:
            font.size = Pt(20)
            font.bold = True
            font.color.rgb = RGBColor(0x2E, 0x74, 0xB5)
        elif i == 2:
            font.size = Pt(16)
            font.bold = True
            font.color.rgb = RGBColor(0x2E, 0x74, 0xB5)
        else:
            font.size = Pt(14)
            font.bold = True
            font.color.rgb = RGBColor(0x2E, 0x74, 0xB5)

    # Create a custom style for code blocks if it doesn't already exist.
    code_style_name = "Code"
    try:
        _ = document.styles[code_style_name]
    except KeyError:
        code_style = document.styles.add_style(code_style_name, 1)  # Paragraph style
        code_font = code_style.font
        code_font.name = "Consolas"
        code_font.size = Pt(10)
        code_font.color.rgb = RGBColor(0x00, 0x00, 0x00)
    return code_style_name


def add_header_footer(document):
    """
    Add a header and footer to each section of the document.
    """
    for section in document.sections:
        # Header
        header = section.header
        header_paragraph = header.paragraphs[0]
        header_paragraph.text = "Comprehensive Python Packaging and Windows Installation Guide"
        header_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        # Footer
        footer = section.footer
        footer_paragraph = footer.paragraphs[0]
        footer_paragraph.text = "Generated by md_to_docx_beautiful.py"
        footer_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER


def apply_code_block_formatting(paragraph):
    """
    Apply additional formatting to a paragraph containing a code block.
    Adds a light gray background shading and a left indent.
    """
    # Set a light gray background shading using the underlying XML.
    p = paragraph._p
    pPr = p.get_or_add_pPr()
    shd = OxmlElement('w:shd')
    shd.set(qn('w:fill'), "E7E7E7")  # Light gray fill color (hex)
    pPr.append(shd)

    # Add indentation to set the code block apart.
    paragraph.paragraph_format.left_indent = Inches(0.3)
    # Optionally, add spacing before/after.
    paragraph.paragraph_format.space_before = Pt(6)
    paragraph.paragraph_format.space_after = Pt(6)


def markdown_to_docx(md_text, output_file):
    """
    Convert the Markdown text into a beautifully formatted DOCX file.
    """
    doc = Document()

    # Set margins, custom styles, header, and footer.
    set_document_margins(doc)
    code_style_name = set_custom_styles(doc)
    add_header_footer(doc)

    # Add a cover/title page
    title_paragraph = doc.add_paragraph()
    title_paragraph.style = doc.styles['Title']
    title_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    title_run = title_paragraph.add_run("Comprehensive Python Packaging and Windows Installation Guide")
    title_run.bold = True
    doc.add_paragraph("")  # Blank paragraph for spacing

    # Variables to handle fenced code blocks
    in_code_block = False
    code_lines = []

    # Process the Markdown text line-by-line.
    for line in md_text.splitlines():
        # Check for fenced code block delimiters (``` markers)
        if re.match(r'^\s*```', line):
            if not in_code_block:
                in_code_block = True
                code_lines = []  # Reset accumulator for code block
            else:
                in_code_block = False
                code_text = "\n".join(code_lines)
                # Create a new paragraph with the code style.
                p = doc.add_paragraph(code_text, style=code_style_name)
                # Apply additional formatting (shading, indentation) to the code block.
                apply_code_block_formatting(p)
            continue

        # If inside a code block, simply accumulate the lines.
        if in_code_block:
            code_lines.append(line)
            continue

        # Process Markdown headings (lines starting with '#' characters)
        heading_match = re.match(r'^(#{1,6})\s+(.*)', line)
        if heading_match:
            level = len(heading_match.group(1))
            text = heading_match.group(2).strip()
            doc.add_heading(text, level=level)
            continue

        # Process block quotes (lines starting with '>')
        blockquote_match = re.match(r'^\s*>+\s?(.*)', line)
        if blockquote_match:
            text = blockquote_match.group(1).strip()
            p = doc.add_paragraph(text)
            p.paragraph_format.left_indent = Inches(0.5)
            p.paragraph_format.space_after = Pt(6)
            run = p.runs[0]
            run.italic = True
            run.font.color.rgb = RGBColor(0x42, 0x24, 0xE9)  # Subtle purple color
            continue

        # Process unordered list items (lines starting with '-', '*' or '+')
        list_match = re.match(r'^\s*[-*+]\s+(.*)', line)
        if list_match:
            text = list_match.group(1).strip()
            doc.add_paragraph(text, style='List Bullet')
            continue

        # Handle blank lines to add spacing.
        if line.strip() == "":
            doc.add_paragraph("")
            continue

        # Default: treat the line as a regular paragraph.
        p = doc.add_paragraph(line.strip())
        p.paragraph_format.space_after = Pt(8)

    # Save the final DOCX document.
    doc.save(output_file)
    print(f"Document saved as {output_file}")

if __name__ == "__main__":

    input_file = r"E:\Projects\Languages\Python\quickscripts\comprehensive_packaging_guide.md"
    output_file = "E:\Projects\Languages\Python\quickscripts\comprehensive_packaging_guide.docx"

    if not os.path.exists(input_file):
        print(f"Input file {input_file} does not exist.")
        sys.exit(1)

    with open(input_file, 'r', encoding='utf-8') as f:
        md_text = f.read()

    markdown_to_docx(md_text, output_file)
